---
import "../styles/global.css";
import Header from "../layouts/Header.astro";
import Anim from "../components/AnimationsBlogs-gsap.tsx";
import { ClientRouter } from "astro:transitions";
const { title, posts = [], currentSlug = "" } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title} - Ivaneer</title>
    <ClientRouter fallback="none" />
  </head>

  <body class="bg-[#0b0a0a] text-zinc-100 font-sans leading-relaxed min-h-screen flex pt-20">
    <Header />

    <!-- Barra lateral izquierda -->
    <aside class="hidden md:block fixed top-0 left-0 w-60 h-screen overflow-y-auto p-4 border-r border-zinc-800 text-sm bg-[#0b0a0a] z-40 pt-20" role="complementary" aria-label="Lista de artÃ­culos">
      <h2 class="text-zinc-400 font-semibold mb-4">Otros posts</h2>
      <ul class="space-y-2">
        {posts.map(post => (
          <li>
            <a
              href={`/blog/${post.slug}/`}
              class={`block transition-colors hover:text-white ${
                currentSlug === post.slug ? "text-[#18bfe4] font-bold" : "text-zinc-400"
              }`}
            >
              {post.data.title}
            </a>
          </li>
        ))}
      </ul>
    </aside>

    <!-- Contenido principal -->
    <main id="content" class="flex-1 px-4 md:px-10 py-8 mx-auto md:ml-60 md:mr-[18rem] prose prose-invert
      [&_h1]:text-5xl [&_h1]:font-extrabold [&_h1]:text-zinc-200 [&_h1]:border-b-4 [&_h1]:border-zinc-500 [&_h1]:pb-2 [&_h1]:scroll-mt-[84px]
      [&_h2]:text-2xl 
      [&_pre]:overflow-x-auto [&_pre]:break-all [&_pre]:max-w-full [&_pre]:relative [&_pre]:p-4 [&_pre]:!bg-[#121110] [&_pre]:rounded-lg [&_pre]:border [&_pre]:border-white/10 [&_pre]:my-6 [&_pre]:group
      [&_code]:whitespace-pre-wrap [&_code]:break-words [&_code]:break-all [&_code]:overflow-x-auto [&_code]:max-w-full [&_code]:group
      [&_a]:text-violet-500 [&_a:hover]:underline [&_a:hover]:decoration-violet-500">

      <slot />
    </main>

    <!-- TOC fijo a la derecha -->
    <nav id="toc" class="hidden md:block fixed top-24 right-4 w-60 max-h-[calc(100vh-6rem)] overflow-y-auto prose prose-invert border-l border-zinc-700 pl-4" role="navigation" aria-label="Tabla de contenidos">
      <h2 class="font-bold mb-4 text-zinc-300">Contenido</h2>
      <ul class="space-y-2"></ul>
    </nav>

    <script defer>
      document.addEventListener('DOMContentLoaded', () => {
        const preElements = document.querySelectorAll('pre');
    
        preElements.forEach(pre => {
          const code = pre.querySelector('code');
          if (!code || pre.querySelector('.copy-button')) return;
    
          const button = document.createElement('button');
          button.className = `
            copy-button absolute top-2 right-2 p-1
            bg-transparent text-white rounded
            opacity-0 transition-opacity duration-300
            flex items-center justify-center z-10
            cursor-pointer pointer-events-none group-hover:pointer-events-auto
          `.trim();
    
          button.setAttribute('data-copy', '');
    
          button.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              class="icon-copy w-4 h-4 fill-current">
              <path d="M16 1H4a2 2 0 0 0-2 2v14h2V3h12V1zm3 4H8a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2zm0 16H8V7h11v14z"/>
            </svg>
          `;
          pre.addEventListener('mouseenter', () => {
            button.style.opacity = "1";
            button.style.pointerEvents = "auto";
          });
          pre.addEventListener('mouseleave', () => {
            button.style.opacity = "0";
            button.style.pointerEvents = "none";
          });
          pre.appendChild(button);
        });
    
        const tocList = document.querySelector('#toc ul');
        const headings = Array.from(document.querySelectorAll('#content h1'));
    
        if (tocList && headings.length > 0) {
          headings.forEach(heading => {
            if (!heading.id) {
              heading.id = heading.textContent.trim().toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]/g, '');
            }
    
            const li = document.createElement('li');
            li.innerHTML = `
              <a href="#${heading.id}" class="hover:text-white transition-colors text-zinc-400">
                ${heading.textContent}
              </a>`;
            tocList.appendChild(li);
          });
        }
    
        const tocLinks = document.querySelectorAll('#toc a');
    
        function onScroll() {
          const scrollPos = window.scrollY + 130;
          let current = headings[0];
    
          for (let i = 0; i < headings.length; i++) {
            if (headings[i].offsetTop <= scrollPos) {
              current = headings[i];
            } else {
              break;
            }
          }
    
          tocLinks.forEach(link => {
            link.classList.remove('text-[#18bfe4]', 'font-bold');
            if (link.getAttribute('href') === '#' + current.id) {
              link.classList.add('text-[#18bfe4]', 'font-bold');
            }
          });
        }
    
        window.addEventListener('scroll', onScroll);
        onScroll();
      });
    </script>
    
    <Anim client:only="react" />
  </body>
</html>
